image: alpine:latest

stages:
  - test
  - build
  - deploy

before_script:
  - export GOPATH=/cache/go

cache:
  key: ${CI_PROJECT_NAME}-${CI_PROJECT_ID}

## BACKEND

Test Backend:
  stage: test
  image: golang:latest
  allow_failure: true
  script:
    - cd backend
    - go mod download
    - go test -cover $(go list ./... | grep -v /vendor/)

Lint Backend:
  stage: test
  image: golang:latest
  allow_failure: true
  script:
    - cd backend
    - go mod download
    - go get -u golang.org/x/lint/golint
    - /cache/go/bin/golint -set_exit_status $(go list ./... | grep -v /vendor/)

Build Backend:
  stage: build
  image: golang:latest
  script:
    - cd backend
    - go build -ldflags="-s -w" wtfd.go
  artifacts:
    paths:
      - backend/wtfd

## FRONTEND

Lint Frontend:
  stage: test
  image: node:latest
  allow_failure: true
  script:
    - cd frontend
    - yarn
    - yarn run lint
  cache:
    paths:
      - frontend/node_modules

Build Frontend:
  stage: build
  image: node:latest
  script:
    - cd frontend
    - yarn
    - yarn run build
  artifacts:
    paths:
      - frontend/dist/
  cache:
    paths:
      - frontend/node_modules

pages: # STAGING DEPLOYMENT
  stage: build
  image: node:latest
  only:
    refs:
      - api
  script:
    - cd frontend
    - yarn
    - yarn run vue-cli-service build --mode development
    - cp -vr dist/. ../public
  artifacts:
    paths:
      - public/
  cache:
    paths:
      - frontend/node_modules
